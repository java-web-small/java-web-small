name: CI / SonarCloud Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  syntax-check:
    name: Build & Syntax Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "maven"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and check syntax (skip tests & checkstyle)
        id: build
        run: |
          mvn verify -DskipTests -Dcheckstyle.skip=true -Dnohttp.checkstyle.skip=true -Dspring-javaformat.skip=true
        continue-on-error: true

      - name: Send Discord notification on failure
        if: steps.build.outcome != 'success'
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: https://discord.com/api/webhooks/1373962801684676618/7mbjxZjYXVcUsiBEutRuLLeGEHvkVNoZ2hkmfqH_zipVql9diF1VT_66iiY3Va_5llyb
          title: "❌ Build Failed"
          description: "Syntax check failed in **${{ github.repository }}**"
          color: 0xff0000
          username: CI/CD Bot
          url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          avatar_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png

      - name: Exit with build status
        if: steps.build.outcome != 'success'
        run: exit 1

      - name: Upload target/ directory as artifact
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: mvn-target
          path: target/
          retention-days: 1

  sonar-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: syntax-check
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "maven"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: mvn-target
          path: target/

      - name: Run SonarCloud Analysis
        id: sonarcloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          PROJECT_KEY="antnm-splus_java-web-small"
          echo "Using SonarCloud project key: $PROJECT_KEY"

          mvn -B verify sonar:sonar \
            -Dsonar.projectKey=$PROJECT_KEY \
            -Dsonar.projectName=spring-petclinic \
            -Dsonar.organization=antnm-splus \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dcheckstyle.skip=true \
            -Dnohttp.checkstyle.skip=true \
            -Dspring-javaformat.skip=true \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.scm.disabled=true
        continue-on-error: true

      - name: Get SonarCloud quality gate result
        id: quality_gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          PROJECT_KEY="antnm-splus_java-web-small"

          # Wait for SonarCloud analysis to complete
          echo "Waiting for SonarCloud analysis to complete..."
          sleep 30

          # Create temporary files for metrics
          echo "" > /tmp/failed_metrics.txt
          echo "" > /tmp/passed_metrics.txt
          echo "" > /tmp/other_metrics.txt

          # Get pull request number if running on PR
          if [ -n "$GITHUB_HEAD_REF" ]; then
            PR_NUMBER=$(echo $GITHUB_REF | sed 's/refs\/pull\/\([0-9]*\)\/merge/\1/')
            echo "Running on PR #$PR_NUMBER"
            QG_RESULT=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY&pullRequest=$PR_NUMBER")
          else
            # If running on branch (usually main)
            BRANCH=${GITHUB_REF#refs/heads/}
            echo "Running on branch $BRANCH"
            QG_RESULT=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY&branch=$BRANCH")
          fi

          echo "Raw QG result: $QG_RESULT"

          # Save status
          STATUS=$(echo "$QG_RESULT" | jq -r '.projectStatus.status // "NONE"')
          echo "status=$STATUS" >> $GITHUB_OUTPUT

          # Get code smells for other metrics
          echo "Fetching measures from SonarCloud API..."
          MEASURES_RESULT=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/measures/component?component=$PROJECT_KEY&metricKeys=code_smells")

          # Always add Code Smells to other metrics
          CODE_SMELLS=$(echo "$MEASURES_RESULT" | jq -r '.component.measures[] | select(.metric == "code_smells") | .value // "0"')
          echo "- Code Smells: ${CODE_SMELLS}" >> /tmp/other_metrics.txt

          # Process conditions from API response
          CONDITIONS=$(echo "$QG_RESULT" | jq -r '.projectStatus.conditions // []')
          CONDITIONS_COUNT=$(echo "$CONDITIONS" | jq -r 'length')

          if [ "$CONDITIONS_COUNT" -gt 0 ]; then
            echo "Processing $CONDITIONS_COUNT conditions from API"
            
            # Process each condition
            for i in $(seq 0 $(($CONDITIONS_COUNT - 1))); do
              CONDITION=$(echo "$CONDITIONS" | jq -r ".[$i]")
              
              METRIC_KEY=$(echo "$CONDITION" | jq -r '.metricKey')
              ACTUAL_VALUE=$(echo "$CONDITION" | jq -r '.actualValue')
              ERROR_THRESHOLD=$(echo "$CONDITION" | jq -r '.errorThreshold')
              COMPARATOR=$(echo "$CONDITION" | jq -r '.comparator')
              STATUS=$(echo "$CONDITION" | jq -r '.status')
              
              echo "Processing condition: $METRIC_KEY - $STATUS"
              
              # Format condition text based on comparator
              if [ "$COMPARATOR" = "LT" ]; then
                # LT means the actual value should be >= threshold
                DISPLAY_COMPARATOR="≥"
              elif [ "$COMPARATOR" = "GT" ]; then
                # GT means the actual value should be <= threshold
                DISPLAY_COMPARATOR="≤"
              elif [ "$COMPARATOR" = "EQ" ]; then
                DISPLAY_COMPARATOR="="
              else
                DISPLAY_COMPARATOR="$COMPARATOR"
              fi
              
              # Format user-friendly metric name
              case "$METRIC_KEY" in
                "new_coverage")
                  METRIC_NAME="Coverage on New Code"
                  UNIT="%"
                  ;;
                "new_duplicated_lines_density")
                  METRIC_NAME="Duplication on New Code"
                  UNIT="%"
                  ;;
                "new_reliability_rating")
                  METRIC_NAME="Reliability Rating"
                  UNIT=""
                  ;;
                "new_security_rating")
                  METRIC_NAME="Security Rating"
                  UNIT=""
                  ;;
                "new_maintainability_rating")
                  METRIC_NAME="Maintainability Rating"
                  UNIT=""
                  ;;
                "new_security_hotspots_reviewed")
                  METRIC_NAME="Security Hotspots Reviewed"
                  UNIT="%"
                  ;;
                *)
                  METRIC_NAME="$METRIC_KEY"
                  UNIT=""
                  ;;
              esac
              
              # Create formatted condition text
              CONDITION_TEXT="- $METRIC_NAME: $ACTUAL_VALUE$UNIT (required $DISPLAY_COMPARATOR $ERROR_THRESHOLD$UNIT)"
              
              # Add to appropriate file based on status
              if [ "$STATUS" = "OK" ]; then
                echo "$CONDITION_TEXT" >> /tmp/passed_metrics.txt
              elif [ "$STATUS" = "ERROR" ]; then
                echo "$CONDITION_TEXT" >> /tmp/failed_metrics.txt
              else
                echo "$CONDITION_TEXT" >> /tmp/other_metrics.txt
              fi
            done
          else
            echo "No conditions found in API response"
            echo "- No quality gate conditions found" >> /tmp/other_metrics.txt
          fi

          # Count failed/passed
          FAILED_COUNT=$(grep -c "^-" /tmp/failed_metrics.txt || echo "0")
          PASSED_COUNT=$(grep -c "^-" /tmp/passed_metrics.txt || echo "0")

          echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT
          echo "passed_count=$PASSED_COUNT" >> $GITHUB_OUTPUT

          # Format outputs
          echo "failed_metrics<<EOF" >> $GITHUB_OUTPUT
          if [ "$FAILED_COUNT" -gt 0 ]; then
            cat /tmp/failed_metrics.txt >> $GITHUB_OUTPUT
          else
            echo "No failed conditions" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

          echo "passed_metrics<<EOF" >> $GITHUB_OUTPUT
          if [ "$PASSED_COUNT" -gt 0 ]; then
            cat /tmp/passed_metrics.txt >> $GITHUB_OUTPUT
          else
            echo "No passed conditions" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

          echo "other_metrics<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/other_metrics.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Discord notification for SonarCloud
        if: always()
        uses: sarisia/actions-status-discord@v1
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          webhook: https://discord.com/api/webhooks/1373962801684676618/7mbjxZjYXVcUsiBEutRuLLeGEHvkVNoZ2hkmfqH_zipVql9diF1VT_66iiY3Va_5llyb
          title: "${{ steps.quality_gate.outputs.status == 'OK' && '✅ SonarCloud Quality Gate: SUCCESS' || '❌ SonarCloud Quality Gate: FAILED' }}"
          description: |
            Quality Gate Analysis for **${{ github.repository }}**
          color: "${{ steps.quality_gate.outputs.status == 'OK' && '0x00ff00' || '0xff0000' }}"
          username: SonarCloud Bot
          url: https://sonarcloud.io/dashboard?id=antnm-splus_java-web-small
          avatar_url: https://sonarcloud.io/apple-touch-icon-180x180.png
          nodetail: false
          content: |
            ### Quality Gate Details

            #### Failed Conditions
            ${{ steps.quality_gate.outputs.failed_metrics }}

            #### Passed Conditions
            ${{ steps.quality_gate.outputs.passed_metrics }}

            #### Other Metrics
            ${{ steps.quality_gate.outputs.other_metrics }}

            [View Full Report on SonarCloud](https://sonarcloud.io/dashboard?id=antnm-splus_java-web-small)

    continue-on-error: true
